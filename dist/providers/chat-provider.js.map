{"version":3,"file":"chat-provider.js","sourceRoot":"","sources":["../../src/providers/chat-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,uBAAuB,CAAC;;IAK3B,4BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAC1B,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;KAChD;IAED,4BAA4B;;IACxB,yCAAY;;IAAnB,UAAoB,aAAoB,EAAE,QAAe,EAAE,IAAW;QAAtE,iBAeI;;;QAZG,IAAI,GAAG,IAAI,GAAG,aAAa,CAAC;QAC5B,IAAI,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,EAAC,aAAa,EAAE,OAAO,EAAC,QAAQ,EAAE,CAAC,CAAC;QACrF,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,cAAc,EAAE,mCAAmC,EAAE,CAAC,CAAC;QACnF,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,CAAC;iBACvC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,UAAA,IAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB,CAAC,CAAC;SACN,CAAC,CAAC;KACV;IAED,EAAE;;IACK,iDAAoB;;IAA3B,UAA4B,aAAoB,EAAE,QAAe,EAAE,IAAW,EAAE,kBAA0B;QAA1G,iBAiBC;;;QAdG,IAAI,GAAG,IAAI,GAAG,eAAe,CAAC;QAC9B,IAAI,aAAa,GAAG,EAAE,YAAY,EAAC,aAAa,EAAE,OAAO,EAAC,QAAQ,EAAE,UAAU,EAAE,kBAAkB,EAAE,CAAC;;;QAGrG,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,cAAc,EAAE,mCAAmC,EAAE,CAAC,CAAC;QACnF,IAAI,OAAO,GAAG,IAAI,cAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACnD,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO;YACtB,KAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,CAAC;iBACvC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;iBACtB,SAAS,CAAC,UAAA,IAAI;gBACX,OAAO,CAAC,IAAI,CAAC,CAAC;aACjB,CAAC,CAAC;SACN,CAAC,CAAC;KACV;IAEM,6CAAgB,GAAvB,UAAwB,OAAe,EAAE,EAAU,EAAE,KAAa;KAEjE;;gBA/CJ,UAAU;;;;gBAHF,IAAI;;6BADb;;SAKa,kBAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class BRIQUEChatProvider {\n\n    constructor( public http: Http){\n        console.log(\"call default service provider\");\n    }\n\n    // Initiate the chatbot call\n\tpublic initiateChat(_customerCode:string, _botCode:string, _url:string){\n        // console.log(\"call intiateChat function\");\n        // Let us prepare the HTTP request\n        _url = _url + \"initiatebot\";\n        var requestParams = JSON.stringify({ customercode:_customerCode, botcode:_botCode });\n        let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        let options = new RequestOptions({ headers: headers });\n        headers.append('Content-Type', 'application/json');\n        return new Promise(resolve => {\n            this.http.post(_url, requestParams, options)\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                });\n            });\n    }\n\n    //\n    public postSubjectSelection(_customerCode:string, _botCode:string, _url:string, _selectedSubjectId: number){\n        // console.log(\"call intiateChat function\");\n        // Let us prepare the HTTP request\n        _url = _url + \"selectsubject\";\n        var requestParams = { customercode:_customerCode, botcode:_botCode, subject_id: _selectedSubjectId };\n        // console.log(\"Sending this data .. \");\n        // console.log(requestParams);\n        let headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded' });\n        let options = new RequestOptions({ headers: headers });\n        headers.append('Content-Type', 'application/json');\n        return new Promise(resolve => {\n            this.http.post(_url, requestParams, options)\n                .map(res => res.json())\n                .subscribe(data => {\n                    resolve(data);\n                });\n            });\n    }\n\n    public postFormResponse(form_id: string, id: string, value: string){\n        \n    }\n}\n"]}